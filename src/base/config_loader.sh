#!/usr/bin/env bash

function load_config() {
    if [[ "$2" != "NULL" ]]
        then
            printf "$1 = $2\n" >> "${AIRFLOW_CONF_DIR}/$3"
    fi
}

function load_config_with_opt() {
    if [[ "$2" != "NULL" ]]
        then
            printf "$1 = $3\n" >> "${AIRFLOW_CONF_DIR}/$5"
    else
        printf "$1 = $4\n" >> "${AIRFLOW_CONF_DIR}/$5"
    fi
}


printf "\n[core]\n" > "${AIRFLOW_CONF_DIR}/airflow.cfg"
load_config "dags_folder" "${AIRFLOW_HOME}/dags" "airflow.cfg"
load_config "dags_are_paused_at_creation" "${CORE_DAGS_ARE_PAUSED_AT_CREATION}" "airflow.cfg"
load_config "base_log_folder" "${AIRFLOW_HOME}/logs" "airflow.cfg"
load_config "remote_logging" "${CORE_REMOTE_LOGGING}" "airflow.cfg"
load_config "remote_log_conn_id" "${CORE_REMOTE_LOG_CONN_ID}" "airflow.cfg"
load_config "remote_base_log_folder" "${CORE_REMOTE_BASE_LOG_FOLDER}" "airflow.cfg"
load_config "encrypt_s3_logs" "${CORE_ENCRYPT_S3_LOGS}" "airflow.cfg"
load_config "logging_level" "${CORE_LOGGING_LEVEL}" "airflow.cfg"
load_config "logging_config_class" "${CORE_LOGGING_CONFIG_CLASS}" "airflow.cfg"
load_config "fab_logging_level" "${CORE_FAB_LOGGING_LEVEL}" "airflow.cfg"
load_config "colored_console_log" "${CORE_COLORED_CONSOLE_LOG}" "airflow.cfg"
load_config "colored_log_format" "${CORE_COLORED_LOG_FORMAT}" "airflow.cfg"
load_config "colored_formatter_class" "${CORE_COLORED_FORMATTER_CLASS}" "airflow.cfg"
load_config "log_format" "${CORE_LOG_FORMAT}" "airflow.cfg"
load_config "log_filename_template" "${CORE_LOG_FILENAME_TEMPLATE}" "airflow.cfg"
load_config "log_processor_filename_template" "${CORE_LOG_PROCESSOR_FILENAME_TEMPLATE}" "airflow.cfg"
load_config "simple_log_format" "${CORE_SIMPLE_LOG_FORMAT}" "airflow.cfg"
load_config "dag_processor_manager_log_location" "${AIRFLOW_HOME}/logs/dag_processor_manager/dag_processor_manager.log" "airflow.cfg"
load_config "dag_concurrency" "${CORE_DAG_CONCURRENCY}" "airflow.cfg"
load_config "dag_file_processor_timeout" "${CORE_DAG_FILE_PROCESSOR_TIMEOUT}" "airflow.cfg"
load_config "dag_run_conf_overrides_params" "${CORE_DAG_RUN_CONF_OVERRIDES_PARAMS}" "airflow.cfg"
load_config "dag_discovery_safe_mode" "${CORE_DAG_DISCOVERY_SAFE_MODE}" "airflow.cfg"
load_config "hostname_callable" "${CORE_HOSTNAME_CALLABLE}" "airflow.cfg"
load_config "default_timezone" "${CORE_DEFAULT_TIMEZONE}" "airflow.cfg"
load_config "default_impersonation" "${CORE_DEFAULT_IMPERSONATION}" "airflow.cfg"
load_config "default_task_retries" "${CORE_DEFAULT_TASK_RETRIES}" "airflow.cfg"
load_config "executor" "${CORE_EXECUTOR}" "airflow.cfg"
load_config "sql_alchemy_conn" "${CORE_SQL_ALCHEMY_CONN}" "airflow.cfg"
load_config "sql_alchemy_pool_enabled" "${CORE_SQL_ALCHEMY_POOL_ENABLED}" "airflow.cfg"
load_config "sql_alchemy_pool_size" "${CORE_SQL_ALCHEMY_POOL_SIZE}" "airflow.cfg"
load_config "sql_alchemy_pool_recycle" "${CORE_SQL_ALCHEMY_POOL_RECYCLE}" "airflow.cfg"
load_config "sql_alchemy_pool_pre_ping" "${CORE_SQL_ALCHEMY_POOL_PRE_PING}" "airflow.cfg"
load_config "sql_alchemy_max_overflow" "${CORE_SQL_ALCHEMY_MAX_OVERFLOW}" "airflow.cfg"
load_config "sql_alchemy_schema" "${CORE_SQL_ALCHEMY_SCHEMA}" "airflow.cfg"
load_config "sql_engine_encoding" "${CORE_SQL_ENGINE_ENCODING}" "airflow.cfg"
load_config "parallelism" "${CORE_PARALLELISM}" "airflow.cfg"
load_config "max_active_runs_per_dag" "${CORE_MAX_ACTIVE_RUNS_PER_DAG}" "airflow.cfg"
load_config "load_examples" "${CORE_LOAD_EXAMPLES}" "airflow.cfg"
load_config "plugins_folder" "${AIRFLOW_HOME}/plugins" "airflow.cfg"
load_config "fernet_key" "$(python -c "from cryptography.fernet import Fernet; print(Fernet.generate_key().decode())")" "airflow.cfg"
load_config "donot_pickle" "${CORE_DONOT_PICKLE}" "airflow.cfg"
load_config "dagbag_import_timeout" "${CORE_DAGBAG_IMPORT_TIMEOUT}" "airflow.cfg"
load_config "task_runner" "${CORE_TASK_RUNNER}" "airflow.cfg"
load_config "task_log_reader" "${CORE_TASK_LOG_READER}" "airflow.cfg"
load_config "security" "${CORE_SECURITY}" "airflow.cfg"
load_config "secure_mode" "${CORE_SECURE_MODE}" "airflow.cfg"
load_config "unit_test_mode" "${CORE_UNIT_TEST_MODE}" "airflow.cfg"
load_config "enable_xcom_pickling" "${CORE_ENABLE_XCOM_PICKLING}" "airflow.cfg"
load_config "killed_task_cleanup_time" "${CORE_KILLED_TASK_CLEANUP_TIME}" "airflow.cfg"
load_config "worker_precheck" "${CORE_WORKER_PRECHECK}" "airflow.cfg"

printf "\n[cli]\n" >> "${AIRFLOW_CONF_DIR}/airflow.cfg"
load_config "api_client" "${CLI_API_CLIENT}" "airflow.cfg"
load_config "endpoint_url" "${CLI_ENDPOINT_URL}" "airflow.cfg"

printf "\n[api]\n" >> "${AIRFLOW_CONF_DIR}/airflow.cfg"
load_config "auth_backend" "${API_AUTH_BACKEND}" "airflow.cfg"

printf "\n[lineage]\n" >> "${AIRFLOW_CONF_DIR}/airflow.cfg"
load_config "backend" "${LINEAGE_BACKEND}" "airflow.cfg"

printf "\n[atlas]\n" >> "${AIRFLOW_CONF_DIR}/airflow.cfg"
load_config "sasl_enabled" "${ATLAS_SASL_ENABLED}" "airflow.cfg"
load_config "host" "${ATLAS_HOST}" "airflow.cfg"
load_config "port" "${ATLAS_PORT}" "airflow.cfg"
load_config "username" "${ATLAS_USERNAME}" "airflow.cfg"
load_config "password" "${ATLAS_PASSWORD}" "airflow.cfg"

printf "\n[operators]\n" >> "${AIRFLOW_CONF_DIR}/airflow.cfg"
load_config "default_owner" "${OPERATORS_DEFAULT_OWNER}" "airflow.cfg"
load_config "default_cpus" "${OPERATORS_DEFAULT_CPUS}" "airflow.cfg"
load_config "default_ram" "${OPERATORS_DEFAULT_RAM}" "airflow.cfg"
load_config "default_disk" "${OPERATORS_DEFAULT_DISK}" "airflow.cfg"
load_config "default_gpus" "${OPERATORS_DEFAULT_GPUS}" "airflow.cfg"

printf "\n[hive]\n" >> "${AIRFLOW_CONF_DIR}/airflow.cfg"
load_config "default_hive_mapred_queue" "${HIVE_DEFAULT_HIVE_MAPRED_QUEUE}" "airflow.cfg"

printf "\n[webserver]\n" >> "${AIRFLOW_CONF_DIR}/airflow.cfg"
load_config "base_url" "${WEBSERVER_BASE_URL}" "airflow.cfg"
load_config "web_server_host" "${WEBSERVER_WEB_SERVER_HOST}" "airflow.cfg"
load_config "web_server_port" "${WEBSERVER_WEB_SERVER_PORT}" "airflow.cfg"
load_config "web_server_ssl_cert" "${WEBSERVER_WEB_SERVER_SSL_CERT}" "airflow.cfg"
load_config "web_server_ssl_key" "${WEBSERVER_WEB_SERVER_SSL_KEY}" "airflow.cfg"
load_config "web_server_master_timeout" "${WEBSERVER_WEB_SERVER_MASTER_TIMEOUT}" "airflow.cfg"
load_config "web_server_worker_timeout" "${WEBSERVER_WEB_SERVER_WORKER_TIMEOUT}" "airflow.cfg"
load_config "worker_refresh_batch_size" "${WEBSERVER_WORKER_REFRESH_BATCH_SIZE}" "airflow.cfg"
load_config "worker_refresh_interval" "${WEBSERVER_WORKER_REFRESH_INTERVAL}" "airflow.cfg"
load_config "worker_class" "${WEBSERVER_WORKER_CLASS}" "airflow.cfg"
load_config "secret_key" "${WEBSERVER_SECRET_KEY}" "airflow.cfg"
load_config "workers" "${WEBSERVER_WORKERS}" "airflow.cfg"
load_config "access_logfile" "${WEBSERVER_ACCESS_LOGFILE}" "airflow.cfg"
load_config "error_logfile" "${WEBSERVER_ERROR_LOGFILE}" "airflow.cfg"
load_config "expose_config" "${WEBSERVER_EXPOSE_CONFIG}" "airflow.cfg"
load_config "authenticate" "${WEBSERVER_AUTHENTICATE}" "airflow.cfg"
load_config "auth_backend" "${WEBSERVER_AUTH_BACKEND}" "airflow.cfg"
load_config "filter_by_owner" "${WEBSERVER_FILTER_BY_OWNER}" "airflow.cfg"
load_config "owner_mode" "${WEBSERVER_OWNER_MODE}" "airflow.cfg"
load_config "dag_default_view" "${WEBSERVER_DAG_DEFAULT_VIEW}" "airflow.cfg"
load_config "dag_orientation" "${WEBSERVER_DAG_ORIENTATION}" "airflow.cfg"
load_config "demo_mode" "${WEBSERVER_DEMO_MODE}" "airflow.cfg"
load_config "log_fetch_timeout_sec" "${WEBSERVER_LOG_FETCH_TIMEOUT_SEC}" "airflow.cfg"
load_config "hide_paused_dags_by_default" "${WEBSERVER_HIDE_PAUSED_DAGS_BY_DEFAULT}" "airflow.cfg"
load_config "page_size" "${WEBSERVER_PAGE_SIZE}" "airflow.cfg"
load_config "rbac" "${WEBSERVER_RBAC}" "airflow.cfg"
load_config "navbar_color" "${WEBSERVER_NAVBAR_COLOR}" "airflow.cfg"
load_config "default_dag_run_display_number" "${WEBSERVER_DEFAULT_DAG_RUN_DISPLAY_NUMBER}" "airflow.cfg"
load_config "default_wrap" "${WEBSERVER_DEFAULT_WRAP}" "airflow.cfg"
load_config "enable_proxy_fix" "${WEBSERVER_ENABLE_PROXY_FIX}" "airflow.cfg"
load_config "cookie_secure" "${WEBSERVER_COOKIE_SECURE}" "airflow.cfg"
load_config "cookie_samesite" "${WEBSERVER_COOKIE_SAMESITE}" "airflow.cfg"

printf "\n[email]\n" >> "${AIRFLOW_CONF_DIR}/airflow.cfg"
load_config "email_backend" "${EMAIL_EMAIL_BACKEND}" "airflow.cfg"

printf "\n[smtp]\n" >> "${AIRFLOW_CONF_DIR}/airflow.cfg"
load_config "smtp_host" "${SMTP_SMTP_HOST}" "airflow.cfg"
load_config "smtp_starttls" "${SMTP_SMTP_STARTTLS}" "airflow.cfg"
load_config "smtp_ssl" "${SMTP_SMTP_SSL}" "airflow.cfg"
load_config "smtp_user" "${SMTP_SMTP_USER}" "airflow.cfg"
load_config "smtp_password" "${SMTP_SMTP_PASSWORD}" "airflow.cfg"
load_config "smtp_port" "${SMTP_SMTP_PORT}" "airflow.cfg"
load_config "smtp_mail_from" "${SMTP_SMTP_MAIL_FROM}" "airflow.cfg"

printf "\n[sentry]\n" >> "${AIRFLOW_CONF_DIR}/airflow.cfg"
load_config "sentry_dsn" "${SENTRY_SENTRY_DSN}" "airflow.cfg"

printf "\n[celery]\n" >> "${AIRFLOW_CONF_DIR}/airflow.cfg"
load_config "celery_app_name" "${CELERY_CELERY_APP_NAME}" "airflow.cfg"
load_config "celery_config_options" "${CELERY_CELERY_CONFIG_OPTIONS}" "airflow.cfg"
load_config "worker_concurrency" "${CELERY_WORKER_CONCURRENCY}" "airflow.cfg"
load_config "worker_log_server_port" "${CELERY_WORKER_LOG_SERVER_PORT}" "airflow.cfg"
load_config "broker_url" "${CELERY_BROKER_URL}" "airflow.cfg"
load_config "result_backend" "${CELERY_RESULT_BACKEND}" "airflow.cfg"
load_config "flower_host" "${CELERY_FLOWER_HOST}" "airflow.cfg"
load_config "flower_url_prefix" "${CELERY_FLOWER_URL_PREFIX}" "airflow.cfg"
load_config "flower_port" "${CELERY_FLOWER_PORT}" "airflow.cfg"
load_config "flower_basic_auth" "${CELERY_FLOWER_BASIC_AUTH}" "airflow.cfg"
load_config "default_queue" "${CELERY_DEFAULT_QUEUE}" "airflow.cfg"
load_config "sync_parallelism" "${CELERY_SYNC_PARALLELISM}" "airflow.cfg"
load_config "ssl_active" "${CELERY_SSL_ACTIVE}" "airflow.cfg"
load_config "ssl_key" "${CELERY_SSL_KEY}" "airflow.cfg"
load_config "ssl_cert" "${CELERY_SSL_CERT}" "airflow.cfg"
load_config "ssl_cacert" "${CELERY_SSL_CACERT}" "airflow.cfg"
load_config "pool" "${CELERY_POOL}" "airflow.cfg"

printf "\n[dask]\n" >> "${AIRFLOW_CONF_DIR}/airflow.cfg"
load_config "cluster_address" "${DASK_CLUSTER_ADDRESS}" "airflow.cfg"
load_config "tls_ca" "${DASK_TLS_CA}" "airflow.cfg"
load_config "tls_cert" "${DASK_TLS_CERT}" "airflow.cfg"
load_config "tls_key" "${DASK_TLS_KEY}" "airflow.cfg"

printf "\n[scheduler]\n" >> "${AIRFLOW_CONF_DIR}/airflow.cfg"
load_config "job_heartbeat_sec" "${SCHEDULER_JOB_HEARTBEAT_SEC}" "airflow.cfg"
load_config "scheduler_heartbeat_sec" "${SCHEDULER_SCHEDULER_HEARTBEAT_SEC}" "airflow.cfg"
load_config "scheduler_health_check_threshold" "${SCHEDULER_SCHEDULER_HEALTH_CHECK_THRESHOLD}" "airflow.cfg"
load_config "scheduler_zombie_task_threshold" "${SCHEDULER_SCHEDULER_ZOMBIE_TASK_THRESHOLD}" "airflow.cfg"
load_config "run_duration" "${SCHEDULER_RUN_DURATION}" "airflow.cfg"
load_config "num_runs" "${SCHEDULER_NUM_RUNS}" "airflow.cfg"
load_config "processor_poll_interval" "${SCHEDULER_PROCESSOR_POLL_INTERVAL}" "airflow.cfg"
load_config "min_file_process_interval" "${SCHEDULER_MIN_FILE_PROCESS_INTERVAL}" "airflow.cfg"
load_config "dag_dir_list_interval" "${SCHEDULER_DAG_DIR_LIST_INTERVAL}" "airflow.cfg"
load_config "print_stats_interval" "${SCHEDULER_PRINT_STATS_INTERVAL}" "airflow.cfg"
load_config "child_process_log_directory" "${AIRFLOW_HOME}/logs/scheduler" "airflow.cfg"
load_config "catchup_by_default" "${SCHEDULER_CATCHUP_BY_DEFAULT}" "airflow.cfg"
load_config "max_tis_per_query" "${SCHEDULER_MAX_TIS_PER_QUERY}" "airflow.cfg"
load_config "max_threads" "${SCHEDULER_MAX_THREADS}" "airflow.cfg"
load_config "statsd_on" "${SCHEDULER_STATSD_ON}" "airflow.cfg"
load_config "statsd_host" "${SCHEDULER_STATSD_HOST}" "airflow.cfg"
load_config "statsd_port" "${SCHEDULER_STATSD_PORT}" "airflow.cfg"
load_config "statsd_prefix" "${SCHEDULER_STATSD_PREFIX}" "airflow.cfg"
load_config "statsd_allow_list" "${SCHEDULER_STATSD_ALLOW_LIST}" "airflow.cfg"
load_config "authenticate" "${SCHEDULER_AUTHENTICATE}" "airflow.cfg"
load_config "use_job_schedule" "${SCHEDULER_USE_JOB_SCHEDULE}" "airflow.cfg"

printf "\n[ldap]\n" >> "${AIRFLOW_CONF_DIR}/airflow.cfg"
load_config "uri" "${LDAP_URI}" "airflow.cfg"
load_config "user_filter" "${LDAP_USER_FILTER}" "airflow.cfg"
load_config "user_name_attr" "${LDAP_USER_NAME_ATTR}" "airflow.cfg"
load_config "group_member_attr" "${LDAP_GROUP_MEMBER_ATTR}" "airflow.cfg"
load_config "superuser_filter" "${LDAP_SUPERUSER_FILTER}" "airflow.cfg"
load_config "data_profiler_filter" "${LDAP_DATA_PROFILER_FILTER}" "airflow.cfg"
load_config "bind_user" "${LDAP_BIND_USER}" "airflow.cfg"
load_config "bind_password" "${LDAP_BIND_PASSWORD}" "airflow.cfg"
load_config "basedn" "${LDAP_BASEDN}" "airflow.cfg"
load_config "cacert" "${LDAP_CACERT}" "airflow.cfg"
load_config "search_scope" "${LDAP_SEARCH_SCOPE}" "airflow.cfg"
load_config "ignore_malformed_schema" "${LDAP_IGNORE_MALFORMED_SCHEMA}" "airflow.cfg"

printf "\n[mesos]\n" >> "${AIRFLOW_CONF_DIR}/airflow.cfg"
load_config "master" "${MESOS_MASTER}" "airflow.cfg"
load_config "framework_name" "${MESOS_FRAMEWORK_NAME}" "airflow.cfg"
load_config "task_cpu" "${MESOS_TASK_CPU}" "airflow.cfg"
load_config "task_memory" "${MESOS_TASK_MEMORY}" "airflow.cfg"
load_config "checkpoint" "${MESOS_CHECKPOINT}" "airflow.cfg"
load_config "authenticate" "${MESOS_AUTHENTICATE}" "airflow.cfg"

printf "\n[kerberos]\n" >> "${AIRFLOW_CONF_DIR}/airflow.cfg"
load_config "ccache" "${KERBEROS_CCACHE}" "airflow.cfg"
load_config "principal" "${KERBEROS_PRINCIPAL}" "airflow.cfg"
load_config "reinit_frequency" "${KERBEROS_REINIT_FREQUENCY}" "airflow.cfg"
load_config "kinit_path" "${KERBEROS_KINIT_PATH}" "airflow.cfg"
load_config "keytab" "${KERBEROS_KEYTAB}" "airflow.cfg"

printf "\n[github_enterprise]\n" >> "${AIRFLOW_CONF_DIR}/airflow.cfg"
load_config "api_rev" "${GITHUB_ENTERPRISE_API_REV}" "airflow.cfg"

printf "\n[admin]\n" >> "${AIRFLOW_CONF_DIR}/airflow.cfg"
load_config "hide_sensitive_variable_fields" "${ADMIN_HIDE_SENSITIVE_VARIABLE_FIELDS}" "airflow.cfg"

printf "\n[elasticsearch]\n" >> "${AIRFLOW_CONF_DIR}/airflow.cfg"
load_config "host" "${ELASTICSEARCH_HOST}" "airflow.cfg"
load_config "log_id_template" "${ELASTICSEARCH_LOG_ID_TEMPLATE}" "airflow.cfg"
load_config "end_of_log_mark" "${ELASTICSEARCH_END_OF_LOG_MARK}" "airflow.cfg"
load_config "frontend" "${ELASTICSEARCH_FRONTEND}" "airflow.cfg"
load_config "write_stdout" "${ELASTICSEARCH_WRITE_STDOUT}" "airflow.cfg"
load_config "json_format" "${ELASTICSEARCH_JSON_FORMAT}" "airflow.cfg"
load_config "json_fields" "${ELASTICSEARCH_JSON_FIELDS}" "airflow.cfg"

printf "\n[elasticsearch_configs]\n" >> "${AIRFLOW_CONF_DIR}/airflow.cfg"
load_config "use_ssl" "${ELASTICSEARCH_CONFIGS_USE_SSL}" "airflow.cfg"
load_config "verify_certs" "${ELASTICSEARCH_CONFIGS_VERIFY_CERTS}" "airflow.cfg"

printf "\n[kubernetes]\n" >> "${AIRFLOW_CONF_DIR}/airflow.cfg"
load_config "worker_container_repository" "${KUBERNETES_WORKER_CONTAINER_REPOSITORY}" "airflow.cfg"
load_config "worker_container_tag" "${KUBERNETES_WORKER_CONTAINER_TAG}" "airflow.cfg"
load_config "worker_container_image_pull_policy" "${KUBERNETES_WORKER_CONTAINER_IMAGE_PULL_POLICY}" "airflow.cfg"
load_config "worker_pods_creation_batch_size" "${KUBERNETES_WORKER_PODS_CREATION_BATCH_SIZE}" "airflow.cfg"
load_config "worker_service_account_name" "${KUBERNETES_WORKER_SERVICE_ACCOUNT_NAME}" "airflow.cfg"
load_config "delete_worker_pods" "${KUBERNETES_DELETE_WORKER_PODS}" "airflow.cfg"
load_config "namespace" "${KUBERNETES_NAMESPACE}" "airflow.cfg"
load_config "airflow_configmap" "${KUBERNETES_AIRFLOW_CONFIGMAP}" "airflow.cfg"
load_config "dags_in_image" "${KUBERNETES_DAGS_IN_IMAGE}" "airflow.cfg"
load_config "dags_volume_subpath" "${KUBERNETES_DAGS_VOLUME_SUBPATH}" "airflow.cfg"
load_config "dags_volume_claim" "${KUBERNETES_DAGS_VOLUME_CLAIM}" "airflow.cfg"
load_config "dags_volume_host" "${KUBERNETES_DAGS_VOLUME_HOST}" "airflow.cfg"
load_config "logs_volume_subpath" "${KUBERNETES_LOGS_VOLUME_SUBPATH}" "airflow.cfg"
load_config "logs_volume_claim" "${KUBERNETES_LOGS_VOLUME_CLAIM}" "airflow.cfg"
load_config "logs_volume_host" "${KUBERNETES_LOGS_VOLUME_HOST}" "airflow.cfg"
load_config "env_from_configmap_ref" "${KUBERNETES_ENV_FROM_CONFIGMAP_REF}" "airflow.cfg"
load_config "env_from_secret_ref" "${KUBERNETES_ENV_FROM_SECRET_REF}" "airflow.cfg"
load_config "git_repo" "${KUBERNETES_GIT_REPO}" "airflow.cfg"
load_config "git_branch" "${KUBERNETES_GIT_BRANCH}" "airflow.cfg"
load_config "git_subpath" "${KUBERNETES_GIT_SUBPATH}" "airflow.cfg"
load_config "git_user" "${KUBERNETES_GIT_USER}" "airflow.cfg"
load_config "git_password" "${KUBERNETES_GIT_PASSWORD}" "airflow.cfg"
load_config "git_sync_root" "${KUBERNETES_GIT_SYNC_ROOT}" "airflow.cfg"
load_config "git_sync_dest" "${KUBERNETES_GIT_SYNC_DEST}" "airflow.cfg"
load_config "git_sync_credentials_secret" "${KUBERNETES_GIT_SYNC_CREDENTIALS_SECRET}" "airflow.cfg"
load_config "git_sync_container_repository" "${KUBERNETES_GIT_SYNC_CONTAINER_REPOSITORY}" "airflow.cfg"
load_config "git_sync_container_tag" "${KUBERNETES_GIT_SYNC_CONTAINER_TAG}" "airflow.cfg"
load_config "git_sync_init_container_name" "${KUBERNETES_GIT_SYNC_INIT_CONTAINER_NAME}" "airflow.cfg"
load_config "git_sync_run_as_user" "${KUBERNETES_GIT_SYNC_RUN_AS_USER}" "airflow.cfg"
load_config "git_dags_folder_mount_point" "${KUBERNETES_GIT_DAGS_FOLDER_MOUNT_POINT}" "airflow.cfg"
load_config "git_ssh_key_secret_name" "${KUBERNETES_GIT_SSH_KEY_SECRET_NAME}" "airflow.cfg"
load_config "git_ssh_known_hosts_configmap_name" "${KUBERNETES_GIT_SSH_KNOWN_HOSTS_CONFIGMAP_NAME}" "airflow.cfg"
load_config "image_pull_secrets" "${KUBERNETES_IMAGE_PULL_SECRETS}" "airflow.cfg"
load_config "gcp_service_account_keys" "${KUBERNETES_GCP_SERVICE_ACCOUNT_KEYS}" "airflow.cfg"
load_config "in_cluster" "${KUBERNETES_IN_CLUSTER}" "airflow.cfg"
load_config "affinity" "${KUBERNETES_AFFINITY}" "airflow.cfg"
load_config "tolerations" "${KUBERNETES_TOLERATIONS}" "airflow.cfg"
load_config "kube_client_request_args" "${KUBERNETES_KUBE_CLIENT_REQUEST_ARGS}" "airflow.cfg"
load_config "run_as_user" "${KUBERNETES_RUN_AS_USER}" "airflow.cfg"
load_config "fs_group" "${KUBERNETES_FS_GROUP}" "airflow.cfg"
